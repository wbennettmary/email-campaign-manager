version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: campaign_postgres
    environment:
      POSTGRES_DB: campaign_db
      POSTGRES_USER: campaign_user
      POSTGRES_PASSWORD: campaign_pass_secure_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U campaign_user -d campaign_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - campaign_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: campaign_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - campaign_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: campaign_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://campaign_user:campaign_pass_secure_123@postgres:5432/campaign_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ultra_secure_secret_key_change_in_production_abc123
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./data_lists:/app/data_lists
      - ./logs:/app/logs
    networks:
      - campaign_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: campaign_celery_worker
    command: celery -A backend.tasks worker --loglevel=info --concurrency=4 --queues=email_queue,campaign_queue,stats_queue,cleanup_queue
    environment:
      DATABASE_URL: postgresql+asyncpg://campaign_user:campaign_pass_secure_123@postgres:5432/campaign_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ultra_secure_secret_key_change_in_production_abc123
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./data_lists:/app/data_lists
      - ./logs:/app/logs
    networks:
      - campaign_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: campaign_celery_beat
    command: celery -A backend.tasks beat --loglevel=info
    environment:
      DATABASE_URL: postgresql+asyncpg://campaign_user:campaign_pass_secure_123@postgres:5432/campaign_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ultra_secure_secret_key_change_in_production_abc123
      PYTHONPATH: /app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - campaign_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: campaign_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - campaign_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: campaign_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - campaign_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: campaign_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - campaign_network

  # Redis Commander (Redis GUI)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: campaign_redis_commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - campaign_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  campaign_network:
    driver: bridge
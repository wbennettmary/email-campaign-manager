version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: campaign_postgres
    environment:
      POSTGRES_DB: campaign_db
      POSTGRES_USER: campaign_user
      POSTGRES_PASSWORD: campaign_pass_secure_123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - campaign_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: campaign_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - campaign_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: campaign_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://campaign_user:campaign_pass_secure_123@postgres:5432/campaign_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ultra_secure_secret_key_change_in_production_abc123
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - ./data_lists:/app/data_lists
      - ./logs:/app/logs
    networks:
      - campaign_network

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: campaign_celery_worker
    command: celery -A backend.tasks worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: postgresql+asyncpg://campaign_user:campaign_pass_secure_123@postgres:5432/campaign_db
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      SECRET_KEY: ultra_secure_secret_key_change_in_production_abc123
      PYTHONPATH: /app
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    volumes:
      - ./data_lists:/app/data_lists
      - ./logs:/app/logs
    networks:
      - campaign_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: campaign_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - campaign_network

volumes:
  postgres_data:

networks:
  campaign_network:
    driver: bridge